<?xml version="1.0" encoding="UTF-8"?>
<!--
  vim: tabstop=2 shiftwidth=2
-->
<project name="doximple" default="build">
  <property name="src" value="src" />
  <target name="build"
          depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd"/>

  <target name="build-parallel"
          depends="prepare,lint,tools-parallel"/>

  <target name="tools-parallel" description="Run tools in parallel">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>

      <antcall target="phpcpd"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc"/>
    </parallel>
  </target>

  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${basedir}/build/logs"/>
    <delete dir="${basedir}/build/pdepend"/>
    <delete dir="${basedir}/build/api"/>
  </target>

  <target name="prepare" depends="clean" description="Prepare for build">
    <mkdir dir="${basedir}/build/logs"/>
    <mkdir dir="${basedir}/build/pdepend"/>
    <mkdir dir="${basedir}/build/api"/>
  </target>

  <target name="lint" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true">
      <arg value="-l" />

      <fileset dir="${basedir}/${src}">
        <include name="**/*.php" />
        <modified />
      </fileset>
    </apply>
  </target>

  <target name="phploc" description="Measure project size using PHPLOC">
    <exec executable="./bin/phploc">
      <arg value="--count-tests" />
      <arg value="--log-csv" />
      <arg value="${basedir}/build/logs/phploc.csv" />
      <arg path="${basedir}/${src}" />
    </exec>
  </target>

  <target name="pdepend" description="Calculate software metrics using PHP_Depend">
    <exec executable="./bin/pdepend">
      <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
      <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
      <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
      <arg path="${basedir}/${src}" />
    </exec>
  </target>

  <target name="phpmd"
          description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
      <exec executable="./bin/phpmd">
      <arg path="${basedir}/${src}" />
      <arg value="text" />
      <arg value="${basedir}/build/phpmd.xml" />
    </exec>
  </target>

  <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
    <exec executable="./bin/phpmd">
      <arg path="${basedir}/${src}" />
      <arg value="xml" />
      <arg value="${basedir}/build/phpmd.xml" />
      <arg value="--reportfile" />
      <arg value="${basedir}/build/logs/pmd.xml" />
    </exec>
  </target>

  <target name="phpcs"
          description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
      <exec executable="./bin/phpcs">
      <arg value="--standard=psr2" />
      <arg path="${basedir}/${src}" />
    </exec>
  </target>

  <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    <exec executable="./bin/phpcs" output="/dev/null">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
      <arg value="--standard=psr2" />
      <arg path="${basedir}/${src}" />
    </exec>
  </target>

  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="./bin/phpcpd">
      <arg value="--log-pmd" />
      <arg value="${basedir}/build/logs/pmd-cpd.xml" />
      <arg path="${basedir}/${src}" />
    </exec>
  </target>

</project>
